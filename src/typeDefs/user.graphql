type Query {
  me: User @isAuthenticated
  verifyAccount(verifyToken: String): AuthRespone
  getUser(userId: ID): User
  admins: [User] @isSuper
  admin(_id: ID): User @isSuper
}

type Mutation {
  signUp(newUser: NewUser): Boolean
  signIn(email: String, password: String): AuthRespone
  signInWithGoogle(token: String): AuthRespone
  signInWithFacebook(facebookAuthData: FacebookAuthData): AuthRespone
  resendConfirmMail(email: String!): Boolean
  updateUser(userId: ID, editUser: EditUser): Boolean 
  updateUserInfo(userId: ID, userInfo: UserInfo): Boolean
  createAdmin(newAdmin: NewAdmin): Boolean
  updateAdmin(_id: ID, newAdmin: NewAdmin): Boolean
  deleteAdmins(ids: [ID]): Boolean
}

type User {
  _id: ID
  password: String
  firstname: String
  lastname: String
  avatar: String
  coverPhoto: String
  email: String
  gender: Gender
  phoneNumber: String
  birthday: Float
  expert: Expert
  role: Role
  isActive: Boolean
  createdAt: Float
  updatedAt: Float
  updatedBy: ID
  deletedAt: Float
  deletedBy: ID
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Role {
  MEMBER
  ADMIN
  SUPERADMIN
}

type Expert {
  areasOfExpertise: String
  jobTitle: String
  yearsExperience: Int
  isVerify: Boolean
}

type AuthRespone {
  accessToken: String
}

input NewUser {
  firstname: String
  lastname: String
  email: String
  password: String
  phoneNumber: String
  birthday: Float
  gender: Gender
  expert: NewExpert
}
input EditUser {
  coverPhoto: String
  avatar: String
}
input UserInfo {
  firstname: String
  lastname: String
  gender: Gender
  birthday: Float
  expert: NewExpert
  phoneNumber: String
}

input NewExpert {
  areasOfExpertise: String
  jobTitle: String
  yearsExperience: Int
}

input FacebookAuthData {
  accessToken: String
  userID: String
}

input NewAdmin {
  firstname: String
  lastname: String
  email: String
  password: String
  phoneNumber: String
  birthday: Float
  gender: Gender
}
